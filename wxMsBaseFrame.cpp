//////////////////////////////////////////////////////////////////////
// This file was auto-generated by codelite's wxCrafter Plugin
// wxCrafter project file: wxMs-Curl.wxcp
// Do not modify this file by hand!
//////////////////////////////////////////////////////////////////////

#include "wxMsBaseFrame.h"


// Declare the bitmap loading function
extern void wxC10F1InitBitmapResources();

static bool bBitmapLoaded = false;


MyFrameBase::MyFrameBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxFrame(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC10F1InitBitmapResources();
        bBitmapLoaded = true;
    }
    // Set icon(s) to the application/dialog
    wxIconBundle app_icons;
    {
        wxBitmap iconBmp = wxXmlResource::Get()->LoadBitmap(wxT("wxMS-1"));
        wxIcon icn;
        icn.CopyFromBitmap(iconBmp);
        app_icons.AddIcon( icn );
    }
    SetIcons( app_icons );

    
    m_menubarMain = new wxMenuBar(0);
    this->SetMenuBar(m_menubarMain);
    
    m_menuFile = new wxMenu();
    m_menubarMain->Append(m_menuFile, _("File"));
    
    m_menuItemCheck4Mail = new wxMenuItem(m_menuFile, wxID_ANY, _("Check  mail\tF5"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemCheck4Mail);
    
    m_menuItemProcessMail = new wxMenuItem(m_menuFile, wxID_ANY, _("Process Mail now\tAlt-M"), _("Run the E-Mail client"), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemProcessMail);
    
    m_menuItemLaunchMailApp = new wxMenuItem(m_menuFile, wxID_MENU_LAUNCH_MAIL_APP, _("Launch E-Mail Application\tAlt-E"), _("Launch the default E-Mail application"), wxITEM_NORMAL);
    m_menuFile->Append(m_menuItemLaunchMailApp);
    
    menuItemFileExit = new wxMenuItem(m_menuFile, wxID_EXIT, _("Exit\tAtl-F4"), wxT(""), wxITEM_NORMAL);
    m_menuFile->Append(menuItemFileExit);
    
    m_menuEmail = new wxMenu();
    m_menubarMain->Append(m_menuEmail, _("E-Mail"));
    
    m_menuEmailFriendsListAddr = new wxMenuItem(m_menuEmail, wxID_MENU_ADD_FRIENDS, _("Add  to Friends list\tAlt-+"), _("Add address to Friends list"), wxITEM_NORMAL);
    m_menuEmail->Append(m_menuEmailFriendsListAddr);
    
    m_menuEmailAddFriendsDomain = new wxMenuItem(m_menuEmail, wxID_MENU_ADD_FRIEND_DOMAIN, _("Add Domain to Friends list"), _("Add Domain to Friends list"), wxITEM_NORMAL);
    m_menuEmail->Append(m_menuEmailAddFriendsDomain);
    
    m_menuEmailBlackListAddr = new wxMenuItem(m_menuEmail, wxID_MENU_ADD_BLACK_LIST, _("Add to blacklist\tAlt--"), _("Add Address to BlackList"), wxITEM_NORMAL);
    m_menuEmail->Append(m_menuEmailBlackListAddr);
    
    m_menuEmailAddBlackDomain = new wxMenuItem(m_menuEmail, wxID_MENU_ADD_BLACK_DOMAIN, _("Add domain to black list"), wxT(""), wxITEM_NORMAL);
    m_menuEmail->Append(m_menuEmailAddBlackDomain);
    
    m_menuEmail->AppendSeparator();
    
    m_menuEmailMarkDelete = new wxMenuItem(m_menuEmail, wxID_MENU_MARK_DELETE, _("Mark for deletion\tAlt-D"), _("Mark message for deletion"), wxITEM_NORMAL);
    m_menuEmail->Append(m_menuEmailMarkDelete);
    
    m_menuEmailMarkBounce = new wxMenuItem(m_menuEmail, wxID_MENU_MARK_BOUNCE, _("Mark for bouncing\tAlt-B"), _("Mark message for bouncing"), wxITEM_NORMAL);
    m_menuEmail->Append(m_menuEmailMarkBounce);
    
    m_menuEmail->AppendSeparator();
    
    m_menuItemEmailDelete = new wxMenuItem(m_menuEmail, wxID_MENU_DELETE_MSG, _("Delete message\tDel"), _("Delete selected message"), wxITEM_NORMAL);
    m_menuEmail->Append(m_menuItemEmailDelete);
    
    m_menuEmail->AppendSeparator();
    
    m_menuEmailPreview = new wxMenuItem(m_menuEmail, wxID_MENU_PREVIEW_MSG, _("Preview message\tAlt-Space"), wxT(""), wxITEM_NORMAL);
    m_menuEmail->Append(m_menuEmailPreview);
    
    m_menuEmail->AppendSeparator();
    
    m_menuEmailMarkTolDeleteAll = new wxMenuItem(m_menuEmail, wxID_MENU_MARK_ALL_DELETE, _("Mark all messages for deletion"), wxT(""), wxITEM_NORMAL);
    m_menuEmail->Append(m_menuEmailMarkTolDeleteAll);
    
    m_menuEmailMarkBounceAll = new wxMenuItem(m_menuEmail, wxID_MENU_MARK_ALL_BOUNCE, _("Mark all messages for bouncing"), wxT(""), wxITEM_NORMAL);
    m_menuEmail->Append(m_menuEmailMarkBounceAll);
    
    m_menuEmail->AppendSeparator();
    
    m_menuItemUnmarkAllDelete = new wxMenuItem(m_menuEmail, wxID_MENU_CLEAR_MARK_ALL_DELETE, _("Clear all 'Delete' boxes"), _("Clear all 'delete' check boxes"), wxITEM_NORMAL);
    m_menuEmail->Append(m_menuItemUnmarkAllDelete);
    
    m_menuItemClearAllBounce = new wxMenuItem(m_menuEmail, wxID_MENU_CLEAR_MARK_ALL_BOUNCE, _("Clear all 'Bounce' boxes"), _("Clear all 'Bounce' check boxes"), wxITEM_NORMAL);
    m_menuEmail->Append(m_menuItemClearAllBounce);
    
    m_menuEmail->AppendSeparator();
    
    m_menuEmailClearList = new wxMenuItem(m_menuEmail, wxID_MENU_CLEAR_LIST, _("Clear the message list\tAlt-R"), wxT(""), wxITEM_NORMAL);
    m_menuEmail->Append(m_menuEmailClearList);
    
    m_menuOptions = new wxMenu();
    m_menubarMain->Append(m_menuOptions, _("Options"));
    
    m_menuItemOptionsSetup = new wxMenuItem(m_menuOptions, wxID_OPTION_SETUP, _("Preferences\tAlt-O"), wxT(""), wxITEM_NORMAL);
    m_menuOptions->Append(m_menuItemOptionsSetup);
    
    m_menuToolsAccounts = new wxMenuItem(m_menuOptions, wxID_ANY, _("Accounts\tAlt-A"), _("Setup Mail Accounts"), wxITEM_NORMAL);
    m_menuOptions->Append(m_menuToolsAccounts);
    
    m_menuItemFilters = new wxMenuItem(m_menuOptions, wxID_ANY, _("Filters\tAlt-I"), _("Setup message filters"), wxITEM_NORMAL);
    m_menuOptions->Append(m_menuItemFilters);
    
    m_menuOptions->AppendSeparator();
    
    m_menuItemLogShow = new wxMenuItem(m_menuOptions, wxID_LOG_SHOW, _("Show Log\tAlt-L"), wxT(""), wxITEM_CHECK);
    m_menuOptions->Append(m_menuItemLogShow);
    
    m_menuItemLogClear = new wxMenuItem(m_menuOptions, wxID_LOG_CLEAR, _("Clear Log\tAlt-C"), wxT(""), wxITEM_NORMAL);
    m_menuOptions->Append(m_menuItemLogClear);
    
    m_menuOptions->AppendSeparator();
    
    m_menuItemRunUT = new wxMenuItem(m_menuOptions, wxID_TOOL_RUN_UT, _("Run UT"), _("Run UT"), wxITEM_NORMAL);
    m_menuOptions->Append(m_menuItemRunUT);
    
    m_menuTools = new wxMenu();
    m_menubarMain->Append(m_menuTools, _("Tools"));
    
    m_menuToolsCheckNew = new wxMenuItem(m_menuTools, wxID_ANY, _("Check for new messages\tF5"), _("Check for new messages"), wxITEM_NORMAL);
    m_menuTools->Append(m_menuToolsCheckNew);
    
    m_menuItemToolStop = new wxMenuItem(m_menuTools, wxID_ANY, _("Stop mail check\tS"), _("Stop mail check or download"), wxITEM_NORMAL);
    m_menuTools->Append(m_menuItemToolStop);
    
    m_menuTools->AppendSeparator();
    
    m_menuBlackFriendsList = new wxMenuItem(m_menuTools, wxID_ANY, _("Black list & Friends list"), wxT(""), wxITEM_NORMAL);
    m_menuTools->Append(m_menuBlackFriendsList);
    
    m_menuFilters = new wxMenuItem(m_menuTools, wxID_ANY, _("Filters\tAlt-F"), wxT(""), wxITEM_NORMAL);
    m_menuTools->Append(m_menuFilters);
    
    m_menuCrash = new wxMenu();
    m_menubarMain->Append(m_menuCrash, _("Crash"));
    
    m_menuItemCrashException = new wxMenuItem(m_menuCrash, wxID_ANY, _("Cause Exception"), wxT(""), wxITEM_NORMAL);
    m_menuCrash->Append(m_menuItemCrashException);
    
    m_menuHelp = new wxMenu();
    m_menubarMain->Append(m_menuHelp, _("Help"));
    
    m_menuItemHelpHelp = new wxMenuItem(m_menuHelp, wxID_HELP, _("Help\tF1"), _("Display help information"), wxITEM_NORMAL);
    m_menuHelp->Append(m_menuItemHelpHelp);
    
    m_menuItemCheck4Update = new wxMenuItem(m_menuHelp, wxID_ANY, _("Check for newer version"), wxT(""), wxITEM_NORMAL);
    m_menuHelp->Append(m_menuItemCheck4Update);
    
    m_menuItemAbout = new wxMenuItem(m_menuHelp, wxID_ABOUT, _("About"), wxT(""), wxITEM_NORMAL);
    m_menuHelp->Append(m_menuItemAbout);
    
    m_toolBarMain = this->CreateToolBar(wxTB_TEXT|wxTB_HORIZONTAL, wxID_ANY);
    m_toolBarMain->SetToolBitmapSize(wxSize(32,24));
    
    m_toolBarMain->AddTool(wxID_CHECK_MAIL, _("Check Mail"), wxXmlResource::Get()->LoadBitmap(wxT("mail_get")), wxNullBitmap, wxITEM_NORMAL, _("Check Default Mail Account (F5)"), wxT(""), NULL);
    
    m_toolBarMain->AddTool(wxID_STOP, _("Stop"), wxXmlResource::Get()->LoadBitmap(wxT("mail_delete")), wxNullBitmap, wxITEM_NORMAL, _("Stop processing ..."), _("Stop"), NULL);
    
    m_toolBarMain->AddSeparator();
    
    m_toolBarMain->AddTool(wxID_PROCESS_MAIL, _("Process Mail"), wxXmlResource::Get()->LoadBitmap(wxT("mail_send")), wxNullBitmap, wxITEM_NORMAL, _("Process Mail - delete and/or bounce, then start E-Mail App."), wxT(""), NULL);
    
    m_toolBarMain->AddTool(wxID_OPEN_MAIL_CLIENT, _("Mail Client"), wxXmlResource::Get()->LoadBitmap(wxT("thunderbird-24x24")), wxNullBitmap, wxITEM_NORMAL, _("Launch E-Mail Client"), wxT(""), NULL);
    
    m_toolBarMain->AddSeparator();
    
    m_gaugeProgress = new wxGauge(m_toolBarMain, wxID_ANY, 100, wxDefaultPosition, wxDLG_UNIT(m_toolBarMain, wxSize(-1,-1)), wxGA_HORIZONTAL);
    m_gaugeProgress->SetValue(10);
    m_toolBarMain->AddControl(m_gaugeProgress);
    
    m_toolBarMain->AddSeparator();
    
    m_toolBarMain->AddStretchableSpace();
    
    m_toolBarMain->AddTool(wxID_HELP, _("Help"), wxXmlResource::Get()->LoadBitmap(wxT("Help")), wxNullBitmap, wxITEM_NORMAL, _("F1 - Help"), _("F1 - Help"), NULL);
    m_toolBarMain->Realize();
    
    wxBoxSizer* bSizerMain = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizerMain);
    
    m_splitterMain = new wxSplitterWindow(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxSP_PERMIT_UNSPLIT);
    m_splitterMain->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_BTNSHADOW));
    m_splitterMain->SetSashGravity(0.5);
    m_splitterMain->SetMinimumPaneSize(10);
    
    bSizerMain->Add(m_splitterMain, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    m_splitterPageMail = new wxPanel(m_splitterMain, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterMain, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_splitterPageMail->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    
    wxBoxSizer* boxSizerMail = new wxBoxSizer(wxVERTICAL);
    m_splitterPageMail->SetSizer(boxSizerMail);
    
    m_gridMail = new wxGrid(m_splitterPageMail, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterPageMail, wxSize(-1, -1)), wxWANTS_CHARS|wxBORDER_RAISED);
    wxFont m_gridMailFont(8, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_gridMail->SetFont(m_gridMailFont);
    m_gridMail->CreateGrid(0, 0);
    m_gridMail->SetRowLabelAlignment(wxALIGN_RIGHT, wxALIGN_CENTRE);
    m_gridMail->SetColLabelAlignment(wxALIGN_CENTRE, wxALIGN_CENTRE);
    #if wxVERSION_NUMBER >= 2904
    m_gridMail->UseNativeColHeader(true);
    #endif
    m_gridMail->EnableEditing(true);
    
    boxSizerMail->Add(m_gridMail, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_splitterPageFeedback = new wxPanel(m_splitterMain, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_splitterMain, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_splitterPageFeedback->SetBackgroundColour(wxSystemSettings::GetColour(wxSYS_COLOUR_INACTIVECAPTION));
    m_splitterMain->SplitHorizontally(m_splitterPageMail, m_splitterPageFeedback, 0);
    
    wxBoxSizer* boxSizerFeedback = new wxBoxSizer(wxVERTICAL);
    m_splitterPageFeedback->SetSizer(boxSizerFeedback);
    
    m_textCtrlLog = new wxTextCtrl(m_splitterPageFeedback, wxID_LOG_WINDOW, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_splitterPageFeedback, wxSize(-1, -1)), wxTE_RICH2|wxTE_RICH|wxTE_READONLY|wxTE_MULTILINE|wxBORDER_RAISED);
    wxFont m_textCtrlLogFont(9, wxFONTFAMILY_SWISS, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, wxT("Segoe UI"));
    m_textCtrlLog->SetFont(m_textCtrlLogFont);
    
    boxSizerFeedback->Add(m_textCtrlLog, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_statusBarMain = new wxStatusBar(this, wxID_ANY, wxST_SIZEGRIP);
    m_statusBarMain->SetFieldsCount(5);
    this->SetStatusBar(m_statusBarMain);
    
    SetName(wxT("MyFrameBase"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent();
    } else {
        CentreOnScreen();
    }
    // Connect events
    this->Connect(wxEVT_KEY_UP, wxKeyEventHandler(MyFrameBase::OnMailGridChar), NULL, this);
    this->Connect(m_menuItemCheck4Mail->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnCheck4NewMail), NULL, this);
    this->Connect(m_menuItemProcessMail->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnProcessMail), NULL, this);
    this->Connect(m_menuItemProcessMail->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiProcessMail), NULL, this);
    this->Connect(m_menuItemLaunchMailApp->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnLaunchMailClient), NULL, this);
    this->Connect(m_menuItemLaunchMailApp->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiLaunchMailApp), NULL, this);
    this->Connect(m_menuEmailFriendsListAddr->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnAddToFriendsList), NULL, this);
    this->Connect(m_menuEmailFriendsListAddr->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiFriendsListAddr), NULL, this);
    this->Connect(m_menuEmailAddFriendsDomain->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnAddToFriendsDomains), NULL, this);
    this->Connect(m_menuEmailAddFriendsDomain->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiFriendsListDom), NULL, this);
    this->Connect(m_menuEmailBlackListAddr->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnAddToBlackList), NULL, this);
    this->Connect(m_menuEmailBlackListAddr->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiBlackListAddr), NULL, this);
    this->Connect(m_menuEmailAddBlackDomain->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnAddToBlackDomains), NULL, this);
    this->Connect(m_menuEmailAddBlackDomain->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiBlackListDom), NULL, this);
    this->Connect(m_menuEmailMarkDelete->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnMarkToDeleteSelected), NULL, this);
    this->Connect(m_menuEmailMarkDelete->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMarkDelete), NULL, this);
    this->Connect(m_menuEmailMarkBounce->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnMarkToBounceSelected), NULL, this);
    this->Connect(m_menuEmailMarkBounce->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMarkBounce), NULL, this);
    this->Connect(m_menuItemEmailDelete->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnEmailDelMessage), NULL, this);
    this->Connect(m_menuItemEmailDelete->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiEmailDelete), NULL, this);
    this->Connect(m_menuEmailPreview->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnEmailPreview), NULL, this);
    this->Connect(m_menuEmailPreview->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiPreview), NULL, this);
    this->Connect(m_menuEmailMarkTolDeleteAll->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnMarkToDeleteAll), NULL, this);
    this->Connect(m_menuEmailMarkTolDeleteAll->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMarkDeleteAll), NULL, this);
    this->Connect(m_menuEmailMarkBounceAll->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnMarkToBounceAll), NULL, this);
    this->Connect(m_menuEmailMarkBounceAll->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMarkBounceAll), NULL, this);
    this->Connect(m_menuItemUnmarkAllDelete->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnClearAllDelete), NULL, this);
    this->Connect(m_menuItemUnmarkAllDelete->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiClearAllDelete), NULL, this);
    this->Connect(m_menuItemClearAllBounce->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnClearAllBounce), NULL, this);
    this->Connect(m_menuItemClearAllBounce->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiClearAllBounce), NULL, this);
    this->Connect(m_menuEmailClearList->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnClearList), NULL, this);
    this->Connect(m_menuEmailClearList->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiClearList), NULL, this);
    this->Connect(m_menuItemOptionsSetup->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnOptionsSetupDlg), NULL, this);
    this->Connect(m_menuToolsAccounts->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnMenuAccounts), NULL, this);
    this->Connect(m_menuItemFilters->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnMenuFilters), NULL, this);
    this->Connect(m_menuItemLogShow->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnOptionsLogShow), NULL, this);
    this->Connect(m_menuItemLogShow->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiLogShow), NULL, this);
    this->Connect(m_menuItemLogClear->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnOptionsLogClear), NULL, this);
    this->Connect(m_menuItemLogClear->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiLogClear), NULL, this);
    m_menuTools->Connect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiCheckNew), NULL, this);
    this->Connect(m_menuToolsCheckNew->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnCheck4NewMail), NULL, this);
    this->Connect(m_menuToolsCheckNew->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiToolsCheckMsgs), NULL, this);
    this->Connect(m_menuItemToolStop->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnMailCheckStop), NULL, this);
    this->Connect(m_menuItemToolStop->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiToolsStop), NULL, this);
    this->Connect(m_menuBlackFriendsList->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnLists), NULL, this);
    this->Connect(m_menuBlackFriendsList->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiToolsBlackFriendsList), NULL, this);
    this->Connect(m_menuFilters->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnMenuFilters), NULL, this);
    this->Connect(m_menuItemCrashException->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnCauseException), NULL, this);
    this->Connect(m_menuItemHelpHelp->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnShowHelpContents), NULL, this);
    this->Connect(m_menuItemHelpHelp->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUIHelpMenu), NULL, this);
    this->Connect(m_menuItemCheck4Update->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnCheck4Update), NULL, this);
    this->Connect(m_menuItemAbout->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnAbout), NULL, this);
    this->Connect(wxID_CHECK_MAIL, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MyFrameBase::OnCheck4NewMail), NULL, this);
    this->Connect(wxID_CHECK_MAIL, wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMailCheckStart), NULL, this);
    this->Connect(wxID_STOP, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MyFrameBase::OnMailCheckStop), NULL, this);
    this->Connect(wxID_STOP, wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMailCheckStop), NULL, this);
    this->Connect(wxID_PROCESS_MAIL, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MyFrameBase::OnProcessMail), NULL, this);
    this->Connect(wxID_PROCESS_MAIL, wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiProcessMail), NULL, this);
    this->Connect(wxID_OPEN_MAIL_CLIENT, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MyFrameBase::OnLaunchMailClient), NULL, this);
    this->Connect(wxID_HELP, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MyFrameBase::OnMenuShowHelpContents), NULL, this);
    this->Connect(wxID_HELP, wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUIHelpToolbar), NULL, this);
    m_gridMail->Connect(wxEVT_SIZE, wxSizeEventHandler(MyFrameBase::OnMailGridSize), NULL, this);
    m_gridMail->Connect(wxEVT_GRID_CELL_LEFT_CLICK, wxGridEventHandler(MyFrameBase::OnMailGridCellLeftClick), NULL, this);
    m_gridMail->Connect(wxEVT_RIGHT_UP, wxMouseEventHandler(MyFrameBase::OnMailGridRightClick), NULL, this);
    m_gridMail->Connect(wxEVT_GRID_CELL_RIGHT_CLICK, wxGridEventHandler(MyFrameBase::OnMailGridRightClick), NULL, this);
    m_gridMail->Connect(wxEVT_GRID_CELL_CHANGED, wxGridEventHandler(MyFrameBase::OnMailGridCellChanged), NULL, this);
    m_gridMail->Connect(wxEVT_GRID_EDITOR_SHOWN, wxGridEventHandler(MyFrameBase::OnMailGridEditorShown), NULL, this);
    m_gridMail->Connect(wxEVT_GRID_CELL_CHANGING, wxGridEventHandler(MyFrameBase::OnMailGridCellChanging), NULL, this);
    m_gridMail->Connect(wxEVT_MOUSEWHEEL, wxMouseEventHandler(MyFrameBase::OnMailGridMouseWheel), NULL, this);
    m_gridMail->Connect(wxEVT_KEY_UP, wxKeyEventHandler(MyFrameBase::OnMailGridChar), NULL, this);
    
}

MyFrameBase::~MyFrameBase()
{
    this->Disconnect(wxEVT_KEY_UP, wxKeyEventHandler(MyFrameBase::OnMailGridChar), NULL, this);
    this->Disconnect(m_menuItemCheck4Mail->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnCheck4NewMail), NULL, this);
    this->Disconnect(m_menuItemProcessMail->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnProcessMail), NULL, this);
    this->Disconnect(m_menuItemProcessMail->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiProcessMail), NULL, this);
    this->Disconnect(m_menuItemLaunchMailApp->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnLaunchMailClient), NULL, this);
    this->Disconnect(m_menuItemLaunchMailApp->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiLaunchMailApp), NULL, this);
    this->Disconnect(m_menuEmailFriendsListAddr->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnAddToFriendsList), NULL, this);
    this->Disconnect(m_menuEmailFriendsListAddr->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiFriendsListAddr), NULL, this);
    this->Disconnect(m_menuEmailAddFriendsDomain->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnAddToFriendsDomains), NULL, this);
    this->Disconnect(m_menuEmailAddFriendsDomain->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiFriendsListDom), NULL, this);
    this->Disconnect(m_menuEmailBlackListAddr->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnAddToBlackList), NULL, this);
    this->Disconnect(m_menuEmailBlackListAddr->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiBlackListAddr), NULL, this);
    this->Disconnect(m_menuEmailAddBlackDomain->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnAddToBlackDomains), NULL, this);
    this->Disconnect(m_menuEmailAddBlackDomain->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiBlackListDom), NULL, this);
    this->Disconnect(m_menuEmailMarkDelete->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnMarkToDeleteSelected), NULL, this);
    this->Disconnect(m_menuEmailMarkDelete->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMarkDelete), NULL, this);
    this->Disconnect(m_menuEmailMarkBounce->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnMarkToBounceSelected), NULL, this);
    this->Disconnect(m_menuEmailMarkBounce->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMarkBounce), NULL, this);
    this->Disconnect(m_menuItemEmailDelete->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnEmailDelMessage), NULL, this);
    this->Disconnect(m_menuItemEmailDelete->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiEmailDelete), NULL, this);
    this->Disconnect(m_menuEmailPreview->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnEmailPreview), NULL, this);
    this->Disconnect(m_menuEmailPreview->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiPreview), NULL, this);
    this->Disconnect(m_menuEmailMarkTolDeleteAll->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnMarkToDeleteAll), NULL, this);
    this->Disconnect(m_menuEmailMarkTolDeleteAll->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMarkDeleteAll), NULL, this);
    this->Disconnect(m_menuEmailMarkBounceAll->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnMarkToBounceAll), NULL, this);
    this->Disconnect(m_menuEmailMarkBounceAll->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMarkBounceAll), NULL, this);
    this->Disconnect(m_menuItemUnmarkAllDelete->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnClearAllDelete), NULL, this);
    this->Disconnect(m_menuItemUnmarkAllDelete->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiClearAllDelete), NULL, this);
    this->Disconnect(m_menuItemClearAllBounce->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnClearAllBounce), NULL, this);
    this->Disconnect(m_menuItemClearAllBounce->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiClearAllBounce), NULL, this);
    this->Disconnect(m_menuEmailClearList->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnClearList), NULL, this);
    this->Disconnect(m_menuEmailClearList->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiClearList), NULL, this);
    this->Disconnect(m_menuItemOptionsSetup->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnOptionsSetupDlg), NULL, this);
    this->Disconnect(m_menuToolsAccounts->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnMenuAccounts), NULL, this);
    this->Disconnect(m_menuItemFilters->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnMenuFilters), NULL, this);
    this->Disconnect(m_menuItemLogShow->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnOptionsLogShow), NULL, this);
    this->Disconnect(m_menuItemLogShow->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiLogShow), NULL, this);
    this->Disconnect(m_menuItemLogClear->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnOptionsLogClear), NULL, this);
    this->Disconnect(m_menuItemLogClear->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiLogClear), NULL, this);
    m_menuTools->Disconnect(wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiCheckNew), NULL, this);
    this->Disconnect(m_menuToolsCheckNew->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnCheck4NewMail), NULL, this);
    this->Disconnect(m_menuToolsCheckNew->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiToolsCheckMsgs), NULL, this);
    this->Disconnect(m_menuItemToolStop->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnMailCheckStop), NULL, this);
    this->Disconnect(m_menuItemToolStop->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiToolsStop), NULL, this);
    this->Disconnect(m_menuBlackFriendsList->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnLists), NULL, this);
    this->Disconnect(m_menuBlackFriendsList->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiToolsBlackFriendsList), NULL, this);
    this->Disconnect(m_menuFilters->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnMenuFilters), NULL, this);
    this->Disconnect(m_menuItemCrashException->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnCauseException), NULL, this);
    this->Disconnect(m_menuItemHelpHelp->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnShowHelpContents), NULL, this);
    this->Disconnect(m_menuItemHelpHelp->GetId(), wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUIHelpMenu), NULL, this);
    this->Disconnect(m_menuItemCheck4Update->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnCheck4Update), NULL, this);
    this->Disconnect(m_menuItemAbout->GetId(), wxEVT_COMMAND_MENU_SELECTED, wxCommandEventHandler(MyFrameBase::OnAbout), NULL, this);
    this->Disconnect(wxID_CHECK_MAIL, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MyFrameBase::OnCheck4NewMail), NULL, this);
    this->Disconnect(wxID_CHECK_MAIL, wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMailCheckStart), NULL, this);
    this->Disconnect(wxID_STOP, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MyFrameBase::OnMailCheckStop), NULL, this);
    this->Disconnect(wxID_STOP, wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiMailCheckStop), NULL, this);
    this->Disconnect(wxID_PROCESS_MAIL, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MyFrameBase::OnProcessMail), NULL, this);
    this->Disconnect(wxID_PROCESS_MAIL, wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUiProcessMail), NULL, this);
    this->Disconnect(wxID_OPEN_MAIL_CLIENT, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MyFrameBase::OnLaunchMailClient), NULL, this);
    this->Disconnect(wxID_HELP, wxEVT_COMMAND_TOOL_CLICKED, wxCommandEventHandler(MyFrameBase::OnMenuShowHelpContents), NULL, this);
    this->Disconnect(wxID_HELP, wxEVT_UPDATE_UI, wxUpdateUIEventHandler(MyFrameBase::OnUpdateUIHelpToolbar), NULL, this);
    m_gridMail->Disconnect(wxEVT_SIZE, wxSizeEventHandler(MyFrameBase::OnMailGridSize), NULL, this);
    m_gridMail->Disconnect(wxEVT_GRID_CELL_LEFT_CLICK, wxGridEventHandler(MyFrameBase::OnMailGridCellLeftClick), NULL, this);
    m_gridMail->Disconnect(wxEVT_RIGHT_UP, wxMouseEventHandler(MyFrameBase::OnMailGridRightClick), NULL, this);
    m_gridMail->Disconnect(wxEVT_GRID_CELL_RIGHT_CLICK, wxGridEventHandler(MyFrameBase::OnMailGridRightClick), NULL, this);
    m_gridMail->Disconnect(wxEVT_GRID_CELL_CHANGED, wxGridEventHandler(MyFrameBase::OnMailGridCellChanged), NULL, this);
    m_gridMail->Disconnect(wxEVT_GRID_EDITOR_SHOWN, wxGridEventHandler(MyFrameBase::OnMailGridEditorShown), NULL, this);
    m_gridMail->Disconnect(wxEVT_GRID_CELL_CHANGING, wxGridEventHandler(MyFrameBase::OnMailGridCellChanging), NULL, this);
    m_gridMail->Disconnect(wxEVT_MOUSEWHEEL, wxMouseEventHandler(MyFrameBase::OnMailGridMouseWheel), NULL, this);
    m_gridMail->Disconnect(wxEVT_KEY_UP, wxKeyEventHandler(MyFrameBase::OnMailGridChar), NULL, this);
    
}

MyBaseAccountsDialog::MyBaseAccountsDialog(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC10F1InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* bSizerTop = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizerTop);
    
    wxBoxSizer* bSizer4 = new wxBoxSizer(wxHORIZONTAL);
    
    bSizerTop->Add(bSizer4, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_gridMailAccounts = new wxGrid(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), wxWANTS_CHARS);
    m_gridMailAccounts->CreateGrid(0, 0);
    m_gridMailAccounts->SetRowLabelAlignment(wxALIGN_RIGHT, wxALIGN_CENTRE);
    m_gridMailAccounts->SetColLabelAlignment(wxALIGN_CENTRE, wxALIGN_CENTRE);
    #if wxVERSION_NUMBER >= 2904
    m_gridMailAccounts->UseNativeColHeader(true);
    #endif
    m_gridMailAccounts->EnableEditing(false);
    
    bSizer4->Add(m_gridMailAccounts, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    wxBoxSizer* bSizer5 = new wxBoxSizer(wxVERTICAL);
    
    bSizer4->Add(bSizer5, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_buttonAdd = new wxButton(this, wxID_BUTTON_ACCOUNT_ADD, _("Add"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_buttonAdd->SetToolTip(_("Add a new account"));
    
    bSizer5->Add(m_buttonAdd, 0, wxALL, WXC_FROM_DIP(5));
    
    m_buttonEdit = new wxButton(this, wxID_ANY, _("Edit"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_buttonEdit->SetToolTip(_("Edit selected account"));
    
    bSizer5->Add(m_buttonEdit, 0, wxALL, WXC_FROM_DIP(5));
    
    m_buttonDelete = new wxButton(this, wxID_ANY, _("Delete"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_buttonDelete->SetToolTip(_("Delete the selected account"));
    
    bSizer5->Add(m_buttonDelete, 0, wxALL, WXC_FROM_DIP(5));
    
    m_buttonImport = new wxButton(this, wxID_ANY, _("Import"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_buttonImport->Enable(false);
    
    bSizer5->Add(m_buttonImport, 0, wxALL, WXC_FROM_DIP(5));
    
    wxBoxSizer* bSizer3 = new wxBoxSizer(wxHORIZONTAL);
    
    bSizerTop->Add(bSizer3, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_sdbSizer1 = new wxStdDialogButtonSizer();
    
    bSizer3->Add(m_sdbSizer1, 1, wxRIGHT|wxTOP|wxBOTTOM|wxEXPAND, WXC_FROM_DIP(5));
    
    m_buttonAcctOK = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_sdbSizer1->AddButton(m_buttonAcctOK);
    
    m_buttonAcctCancel = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_sdbSizer1->AddButton(m_buttonAcctCancel);
    m_sdbSizer1->Realize();
    
    SetName(wxT("MyBaseAccountsDialog"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    // Connect events
    m_gridMailAccounts->Connect(wxEVT_GRID_CELL_LEFT_CLICK, wxGridEventHandler(MyBaseAccountsDialog::OnAccountSelect), NULL, this);
    m_gridMailAccounts->Connect(wxEVT_SIZE, wxSizeEventHandler(MyBaseAccountsDialog::OnAccountGridSize), NULL, this);
    m_buttonAdd->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MyBaseAccountsDialog::OnAccountAdd), NULL, this);
    m_buttonEdit->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MyBaseAccountsDialog::OnAccountEdit), NULL, this);
    m_buttonDelete->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MyBaseAccountsDialog::OnAccountDelete), NULL, this);
    
}

MyBaseAccountsDialog::~MyBaseAccountsDialog()
{
    m_gridMailAccounts->Disconnect(wxEVT_GRID_CELL_LEFT_CLICK, wxGridEventHandler(MyBaseAccountsDialog::OnAccountSelect), NULL, this);
    m_gridMailAccounts->Disconnect(wxEVT_SIZE, wxSizeEventHandler(MyBaseAccountsDialog::OnAccountGridSize), NULL, this);
    m_buttonAdd->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MyBaseAccountsDialog::OnAccountAdd), NULL, this);
    m_buttonEdit->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MyBaseAccountsDialog::OnAccountEdit), NULL, this);
    m_buttonDelete->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MyBaseAccountsDialog::OnAccountDelete), NULL, this);
    
}

MyBaseAccountsDetailsDialog::MyBaseAccountsDetailsDialog(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC10F1InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* bSizer6 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(bSizer6);
    
    wxStaticBoxSizer* staticBoxSizer10 = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, _("Account Name")), wxVERTICAL);
    
    bSizer6->Add(staticBoxSizer10, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_textCtrlAccountName = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_textCtrlAccountName->SetToolTip(_("Enter name of the account here"));
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlAccountName->SetHint(wxT(""));
    #endif
    
    staticBoxSizer10->Add(m_textCtrlAccountName, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_notebookAcctDetails = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_notebookAcctDetails->SetName(wxT("m_notebookAcctDetails"));
    
    staticBoxSizer10->Add(m_notebookAcctDetails, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_panelIncomingMail = new wxPanel(m_notebookAcctDetails, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookAcctDetails, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebookAcctDetails->AddPage(m_panelIncomingMail, _("Incoming Server (POP3)"), false);
    
    wxBoxSizer* bSizer107 = new wxBoxSizer(wxVERTICAL);
    m_panelIncomingMail->SetSizer(bSizer107);
    
    wxGridSizer* gSizer28 = new wxGridSizer(0, 2, 0, 0);
    
    bSizer107->Add(gSizer28, 0, 0, WXC_FROM_DIP(5));
    
    m_staticTextServerAddressLabel = new wxStaticText(m_panelIncomingMail, wxID_ANY, _("POP3 Server address:"), wxDefaultPosition, wxDLG_UNIT(m_panelIncomingMail, wxSize(-1, -1)), 0);
    
    gSizer28->Add(m_staticTextServerAddressLabel, 0, wxRIGHT|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlPop3ServerUrl = new wxTextCtrl(m_panelIncomingMail, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelIncomingMail, wxSize(-1, -1)), wxBORDER_SIMPLE);
    m_textCtrlPop3ServerUrl->SetToolTip(_("Enter the POP3 Server URL here; eg. mypop.isp.net"));
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlPop3ServerUrl->SetHint(wxT(""));
    #endif
    
    gSizer28->Add(m_textCtrlPop3ServerUrl, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_staticTextUserNameLabel = new wxStaticText(m_panelIncomingMail, wxID_ANY, _("User Name:"), wxDefaultPosition, wxDLG_UNIT(m_panelIncomingMail, wxSize(-1, -1)), 0);
    
    gSizer28->Add(m_staticTextUserNameLabel, 0, wxRIGHT|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlUserName = new wxTextCtrl(m_panelIncomingMail, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelIncomingMail, wxSize(-1, -1)), wxBORDER_SIMPLE);
    m_textCtrlUserName->SetToolTip(_("Enter the user name for this account here"));
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlUserName->SetHint(wxT(""));
    #endif
    
    gSizer28->Add(m_textCtrlUserName, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_staticTextPasswordLabel = new wxStaticText(m_panelIncomingMail, wxID_ANY, _("Password:"), wxDefaultPosition, wxDLG_UNIT(m_panelIncomingMail, wxSize(-1, -1)), 0);
    m_staticTextPasswordLabel->SetToolTip(_("Enter the password for this user here"));
    
    gSizer28->Add(m_staticTextPasswordLabel, 0, wxRIGHT|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlPassword = new wxTextCtrl(m_panelIncomingMail, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelIncomingMail, wxSize(-1, -1)), wxTE_PASSWORD|wxTE_NOHIDESEL|wxBORDER_SIMPLE);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlPassword->SetHint(wxT(""));
    #endif
    
    gSizer28->Add(m_textCtrlPassword, 0, wxALL|wxEXPAND|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_staticText1315 = new wxStaticText(m_panelIncomingMail, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelIncomingMail, wxSize(-1, -1)), 0);
    
    gSizer28->Add(m_staticText1315, 0, wxALL, WXC_FROM_DIP(5));
    
    m_checkBoxRememberPW = new wxCheckBox(m_panelIncomingMail, wxID_ANY, _("Remember the password"), wxDefaultPosition, wxDLG_UNIT(m_panelIncomingMail, wxSize(-1, -1)), 0);
    m_checkBoxRememberPW->SetValue(false);
    m_checkBoxRememberPW->SetToolTip(_("Check this if you want wxMS to remember the password"));
    
    gSizer28->Add(m_checkBoxRememberPW, 0, 0, WXC_FROM_DIP(5));
    
    m_staticText14119 = new wxStaticText(m_panelIncomingMail, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelIncomingMail, wxSize(-1, -1)), 0);
    
    gSizer28->Add(m_staticText14119, 0, 0, WXC_FROM_DIP(5));
    
    m_buttonAdvPop3Config = new wxButton(m_panelIncomingMail, wxID_ANY, _("Advanced POP3 configuration"), wxDefaultPosition, wxDLG_UNIT(m_panelIncomingMail, wxSize(-1, -1)), 0);
    m_buttonAdvPop3Config->Hide();
    
    gSizer28->Add(m_buttonAdvPop3Config, 0, 0, WXC_FROM_DIP(5));
    
    m_buttonTestPop3Server = new wxButton(m_panelIncomingMail, wxID_ANY, _("Test Connection"), wxDefaultPosition, wxDLG_UNIT(m_panelIncomingMail, wxSize(-1,-1)), 0);
    m_buttonTestPop3Server->SetToolTip(_("Check the POP3 server connection."));
    
    gSizer28->Add(m_buttonTestPop3Server, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticTextTestResult = new wxStaticText(m_panelIncomingMail, wxID_ANY, _("Result:"), wxDefaultPosition, wxDLG_UNIT(m_panelIncomingMail, wxSize(-1,-1)), 0);
    
    gSizer28->Add(m_staticTextTestResult, 0, wxALL, WXC_FROM_DIP(5));
    
    m_panelOutgoingMail = new wxPanel(m_notebookAcctDetails, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookAcctDetails, wxSize(-1, -1)), wxTAB_TRAVERSAL);
    m_notebookAcctDetails->AddPage(m_panelOutgoingMail, _("Outgoing Mail"), false);
    
    wxBoxSizer* bSizer922 = new wxBoxSizer(wxVERTICAL);
    m_panelOutgoingMail->SetSizer(bSizer922);
    
    m_checkBoxAllowBounce23 = new wxCheckBox(m_panelOutgoingMail, wxID_ANY, _("Allow bouncing of messages from this account"), wxDefaultPosition, wxDLG_UNIT(m_panelOutgoingMail, wxSize(-1, -1)), 0);
    m_checkBoxAllowBounce23->SetValue(false);
    
    bSizer922->Add(m_checkBoxAllowBounce23, 0, wxALL, WXC_FROM_DIP(5));
    
    wxBoxSizer* bSizer10124 = new wxBoxSizer(wxHORIZONTAL);
    
    bSizer922->Add(bSizer10124, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText925 = new wxStaticText(m_panelOutgoingMail, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelOutgoingMail, wxSize(-1, -1)), 0);
    
    bSizer10124->Add(m_staticText925, 0, wxALL, WXC_FROM_DIP(5));
    
    wxBoxSizer* bSizer1126 = new wxBoxSizer(wxVERTICAL);
    
    bSizer10124->Add(bSizer1126, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText827 = new wxStaticText(m_panelOutgoingMail, wxID_ANY, _("Please enter the 'From:' e-mail address to be added to the bounced messages."), wxDefaultPosition, wxDLG_UNIT(m_panelOutgoingMail, wxSize(-1, -1)), 0);
    
    bSizer1126->Add(m_staticText827, 0, wxALL, WXC_FROM_DIP(5));
    
    wxBoxSizer* bSizer1228 = new wxBoxSizer(wxHORIZONTAL);
    
    bSizer1126->Add(bSizer1228, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText10129 = new wxStaticText(m_panelOutgoingMail, wxID_ANY, _("Sender E-mail Address"), wxDefaultPosition, wxDLG_UNIT(m_panelOutgoingMail, wxSize(-1, -1)), 0);
    
    bSizer1228->Add(m_staticText10129, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrl6130 = new wxTextCtrl(m_panelOutgoingMail, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelOutgoingMail, wxSize(-1, -1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrl6130->SetHint(wxT(""));
    #endif
    
    bSizer1228->Add(m_textCtrl6130, 1, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_staticline231 = new wxStaticLine(m_panelOutgoingMail, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelOutgoingMail, wxSize(-1, -1)), wxLI_HORIZONTAL);
    
    bSizer1126->Add(m_staticline231, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextBounceSMTPAddress32 = new wxStaticText(m_panelOutgoingMail, wxID_ANY, _("In order to send a bouce notice, the address of an SMTP server is required.\nThis might be the address of your ISP mailserver."), wxDefaultPosition, wxDLG_UNIT(m_panelOutgoingMail, wxSize(-1, -1)), 0);
    
    bSizer1126->Add(m_staticTextBounceSMTPAddress32, 0, wxALL, WXC_FROM_DIP(5));
    
    wxBoxSizer* bSizer1333 = new wxBoxSizer(wxHORIZONTAL);
    
    bSizer1126->Add(bSizer1333, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText12134 = new wxStaticText(m_panelOutgoingMail, wxID_ANY, _("SMTP Server Address"), wxDefaultPosition, wxDLG_UNIT(m_panelOutgoingMail, wxSize(-1, -1)), 0);
    
    bSizer1333->Add(m_staticText12134, 0, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrl7135 = new wxTextCtrl(m_panelOutgoingMail, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelOutgoingMail, wxSize(-1, -1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrl7135->SetHint(wxT(""));
    #endif
    
    bSizer1333->Add(m_textCtrl7135, 1, wxALL|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    wxGridSizer* gSizer2136 = new wxGridSizer(0, 2, 0, 0);
    
    bSizer1126->Add(gSizer2136, 1, wxRIGHT|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText13137 = new wxStaticText(m_panelOutgoingMail, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelOutgoingMail, wxSize(-1, -1)), 0);
    
    gSizer2136->Add(m_staticText13137, 0, wxALL, WXC_FROM_DIP(5));
    
    m_buttonAdvanceBounceOptions38 = new wxButton(m_panelOutgoingMail, wxID_ANY, _("Advanced Bounce Options"), wxDefaultPosition, wxDLG_UNIT(m_panelOutgoingMail, wxSize(-1, -1)), 0);
    
    gSizer2136->Add(m_buttonAdvanceBounceOptions38, 0, wxALL|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    wxBoxSizer* bSizer3 = new wxBoxSizer(wxHORIZONTAL);
    
    bSizer6->Add(bSizer3, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_sdbSizer6 = new wxStdDialogButtonSizer();
    
    bSizer3->Add(m_sdbSizer6, 1, wxLEFT|wxRIGHT|wxBOTTOM|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button226 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_sdbSizer6->AddButton(m_button226);
    
    m_button227 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_sdbSizer6->AddButton(m_button227);
    
    m_button228 = new wxButton(this, wxID_HELP, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_sdbSizer6->AddButton(m_button228);
    m_sdbSizer6->Realize();
    
    SetName(wxT("MyBaseAccountsDetailsDialog"));
    SetSize(-1,-1);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
    // Connect events
    m_buttonAdvPop3Config->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MyBaseAccountsDetailsDialog::OnAdvancedPopConfig), NULL, this);
    m_buttonTestPop3Server->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MyBaseAccountsDetailsDialog::OnMailServerTest), NULL, this);
    
}

MyBaseAccountsDetailsDialog::~MyBaseAccountsDetailsDialog()
{
    m_buttonAdvPop3Config->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MyBaseAccountsDetailsDialog::OnAdvancedPopConfig), NULL, this);
    m_buttonTestPop3Server->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(MyBaseAccountsDetailsDialog::OnMailServerTest), NULL, this);
    
}

MyDialogUpdate::MyDialogUpdate(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC10F1InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer249 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer249);
    
    m_staticTextVersion = new wxStaticText(this, wxID_ANY, _("Version %d.%d.%d is available for download!"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer249->Add(m_staticTextVersion, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer253 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizer249->Add(boxSizer253, 0, wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_staticText255 = new wxStaticText(this, wxID_ANY, _("Visit the"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer253->Add(m_staticText255, 0, wxALL, WXC_FROM_DIP(5));
    
    m_hyperlinkwxMS = new wxHyperlinkCtrl(this, wxID_ANY, _("wxMS"), wxT("http://columbinehoney.net/index.php/software/wxwidgets/wxms"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxHL_DEFAULT_STYLE);
    m_hyperlinkwxMS->SetNormalColour(wxColour(wxT("#0000FF")));
    m_hyperlinkwxMS->SetHoverColour(wxColour(wxT("#0000FF")));
    m_hyperlinkwxMS->SetVisitedColour(wxColour(wxT("#FF0000")));
    
    boxSizer253->Add(m_hyperlinkwxMS, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText259 = new wxStaticText(this, wxID_ANY, _("web site"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer253->Add(m_staticText259, 0, wxALL, WXC_FROM_DIP(5));
    
    m_staticText261 = new wxStaticText(this, wxID_ANY, _("for the latest version"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer249->Add(m_staticText261, 0, wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_staticLine263 = new wxStaticLine(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxLI_HORIZONTAL);
    
    boxSizer249->Add(m_staticLine263, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticText265 = new wxStaticText(this, wxID_ANY, _("Please note:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer249->Add(m_staticText265, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_staticText267 = new wxStaticText(this, wxID_ANY, _("Automatic checking for updates at startup can \n be enabled or disabled in the 'Options' dialog\n"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    boxSizer249->Add(m_staticText267, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_stdBtnSizer269 = new wxStdDialogButtonSizer();
    
    boxSizer249->Add(m_stdBtnSizer269, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_button271 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer269->AddButton(m_button271);
    m_stdBtnSizer269->Realize();
    
    SetName(wxT("MyDialogUpdate"));
    SetSize(333,239);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
}

MyDialogUpdate::~MyDialogUpdate()
{
}

wxMsMessagePreviewBase::wxMsMessagePreviewBase(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC10F1InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer283 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer283);
    
    wxFlexGridSizer* flexGridSizer285 = new wxFlexGridSizer(0, 2, 0, 0);
    flexGridSizer285->SetFlexibleDirection( wxBOTH );
    flexGridSizer285->SetNonFlexibleGrowMode( wxFLEX_GROWMODE_SPECIFIED );
    
    boxSizer283->Add(flexGridSizer285, 0, wxLEFT|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextLabelFrom = new wxStaticText(this, wxID_ANY, _("From:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer285->Add(m_staticTextLabelFrom, 1, wxLEFT|wxRIGHT|wxTOP, WXC_FROM_DIP(5));
    
    m_staticTextDataFrom = new wxStaticText(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer285->Add(m_staticTextDataFrom, 1, wxLEFT|wxTOP|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextLabelDate = new wxStaticText(this, wxID_ANY, _("Date:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer285->Add(m_staticTextLabelDate, 0, wxLEFT|wxRIGHT, WXC_FROM_DIP(5));
    
    m_staticTextDataDate = new wxStaticText(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer285->Add(m_staticTextDataDate, 0, wxLEFT|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextLabelTo = new wxStaticText(this, wxID_ANY, _("To:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer285->Add(m_staticTextLabelTo, 0, wxLEFT|wxRIGHT, WXC_FROM_DIP(5));
    
    m_staticTextDataTo = new wxStaticText(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer285->Add(m_staticTextDataTo, 0, wxLEFT|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextLabelSubject = new wxStaticText(this, wxID_ANY, _("Subject:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer285->Add(m_staticTextLabelSubject, 1, wxLEFT|wxRIGHT, WXC_FROM_DIP(5));
    
    m_staticTextDataSubject = new wxStaticText(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer285->Add(m_staticTextDataSubject, 0, wxLEFT|wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextLabelAttachments = new wxStaticText(this, wxID_ANY, _("Attachments:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer285->Add(m_staticTextLabelAttachments, 0, wxLEFT|wxRIGHT, WXC_FROM_DIP(5));
    
    m_staticTextAttachments = new wxStaticText(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer285->Add(m_staticTextAttachments, 0, wxLEFT, WXC_FROM_DIP(5));
    
    m_staticTextLabelMsgType = new wxStaticText(this, wxID_ANY, _("Msg Type:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer285->Add(m_staticTextLabelMsgType, 0, wxLEFT|wxRIGHT|wxBOTTOM, WXC_FROM_DIP(5));
    
    m_staticTextMsgType = new wxStaticText(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    flexGridSizer285->Add(m_staticTextMsgType, 0, wxLEFT|wxBOTTOM, WXC_FROM_DIP(5));
    
    wxBoxSizer* boxSizer303 = new wxBoxSizer(wxVERTICAL);
    
    boxSizer283->Add(boxSizer303, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    m_notebookMessagePreview = new wxNotebook(this, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxBK_DEFAULT);
    m_notebookMessagePreview->SetName(wxT("m_notebookMessagePreview"));
    
    boxSizer303->Add(m_notebookMessagePreview, 1, wxLEFT|wxRIGHT|wxBOTTOM|wxEXPAND, WXC_FROM_DIP(5));
    
    m_panelMessageText = new wxPanel(m_notebookMessagePreview, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookMessagePreview, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_notebookMessagePreview->AddPage(m_panelMessageText, _("Plain Text"), false);
    
    wxBoxSizer* boxSizer311 = new wxBoxSizer(wxVERTICAL);
    m_panelMessageText->SetSizer(boxSizer311);
    
    m_textCtrlMessage = new wxTextCtrl(m_panelMessageText, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelMessageText, wxSize(-1,-1)), wxTE_READONLY|wxTE_MULTILINE|wxBORDER_SUNKEN);
    
    boxSizer311->Add(m_textCtrlMessage, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    m_panelMessageHtml = new wxPanel(m_notebookMessagePreview, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookMessagePreview, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_notebookMessagePreview->AddPage(m_panelMessageHtml, _("HTML"), false);
    
    wxBoxSizer* boxSizer351 = new wxBoxSizer(wxVERTICAL);
    m_panelMessageHtml->SetSizer(boxSizer351);
    
    m_htmlWinHtml = new wxHtmlWindow(m_panelMessageHtml, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_panelMessageHtml, wxSize(-1,-1)), wxHW_SCROLLBAR_AUTO|wxBORDER_RAISED);
    m_htmlWinHtml->SetPage(wxT("<b>wxHtmlWindow control!</b>"));
    
    boxSizer351->Add(m_htmlWinHtml, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    m_panelMessageSource = new wxPanel(m_notebookMessagePreview, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookMessagePreview, wxSize(-1,-1)), wxTAB_TRAVERSAL|wxBORDER_SIMPLE);
    m_notebookMessagePreview->AddPage(m_panelMessageSource, _("Source"), false);
    
    wxBoxSizer* boxSizer313 = new wxBoxSizer(wxVERTICAL);
    m_panelMessageSource->SetSizer(boxSizer313);
    
    m_textCtrlMessageSource = new wxTextCtrl(m_panelMessageSource, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelMessageSource, wxSize(-1,-1)), wxTE_READONLY|wxTE_MULTILINE);
    
    boxSizer313->Add(m_textCtrlMessageSource, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    m_buttonSaveMimeSource2File = new wxButton(m_panelMessageSource, wxID_ANY, _("Save  to file"), wxDefaultPosition, wxDLG_UNIT(m_panelMessageSource, wxSize(-1,-1)), 0);
    m_buttonSaveMimeSource2File->SetToolTip(_("Save Mime source to a file."));
    
    boxSizer313->Add(m_buttonSaveMimeSource2File, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_panelMimeStructure = new wxPanel(m_notebookMessagePreview, wxID_ANY, wxDefaultPosition, wxDLG_UNIT(m_notebookMessagePreview, wxSize(-1,-1)), wxTAB_TRAVERSAL);
    m_notebookMessagePreview->AddPage(m_panelMimeStructure, _("Mime Structure"), false);
    
    wxBoxSizer* boxSizer329 = new wxBoxSizer(wxVERTICAL);
    m_panelMimeStructure->SetSizer(boxSizer329);
    
    m_textCtrlMimeStructure = new wxTextCtrl(m_panelMimeStructure, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(m_panelMimeStructure, wxSize(-1,-1)), wxTE_READONLY|wxTE_MULTILINE);
    
    boxSizer329->Add(m_textCtrlMimeStructure, 1, wxEXPAND, WXC_FROM_DIP(5));
    
    m_stdBtnSizer319 = new wxStdDialogButtonSizer();
    
    boxSizer283->Add(m_stdBtnSizer319, 0, wxBOTTOM|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_button321 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer319->AddButton(m_button321);
    m_stdBtnSizer319->Realize();
    
    
    #if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(m_notebookMessagePreview)){
        wxPersistenceManager::Get().RegisterAndRestore(m_notebookMessagePreview);
    } else {
        wxPersistenceManager::Get().Restore(m_notebookMessagePreview);
    }
    #endif
    
    SetName(wxT("wxMsMessagePreviewBase"));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
#if wxVERSION_NUMBER >= 2900
    if(!wxPersistenceManager::Get().Find(this)) {
        wxPersistenceManager::Get().RegisterAndRestore(this);
    } else {
        wxPersistenceManager::Get().Restore(this);
    }
#endif
    // Connect events
    m_buttonSaveMimeSource2File->Connect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(wxMsMessagePreviewBase::OnSaveMimeSource2File), NULL, this);
    
}

wxMsMessagePreviewBase::~wxMsMessagePreviewBase()
{
    m_buttonSaveMimeSource2File->Disconnect(wxEVT_COMMAND_BUTTON_CLICKED, wxCommandEventHandler(wxMsMessagePreviewBase::OnSaveMimeSource2File), NULL, this);
    
}

MyBaseAdvancedPopConfigDlg::MyBaseAdvancedPopConfigDlg(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC10F1InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer373 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer373);
    
    wxBoxSizer* boxSizerPop3AdvConfig = new wxBoxSizer(wxVERTICAL);
    
    boxSizer373->Add(boxSizerPop3AdvConfig, 1, wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizerPop3ServerPort = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, _("Incoming POP Server")), wxVERTICAL);
    
    boxSizerPop3AdvConfig->Add(staticBoxSizerPop3ServerPort, 0, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxStaticBoxSizer* staticBoxSizer393 = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, _("Server port:")), wxHORIZONTAL);
    
    staticBoxSizerPop3ServerPort->Add(staticBoxSizer393, 0, wxALL, WXC_FROM_DIP(5));
    
    m_checkBoxUseDefaultPort = new wxCheckBox(this, wxID_ANY, _("Use default port"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    m_checkBoxUseDefaultPort->SetValue(false);
    
    staticBoxSizer393->Add(m_checkBoxUseDefaultPort, 0, wxTOP, WXC_FROM_DIP(5));
    
    m_textCtrlServerPort = new wxTextCtrl(this, wxID_ANY, wxT("110"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), wxTE_NOHIDESEL);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlServerPort->SetHint(_("Server port number (default: 110)"));
    #endif
    
    staticBoxSizer393->Add(m_textCtrlServerPort, 0, 0, WXC_FROM_DIP(5));
    
    wxBoxSizer* bSizer31 = new wxBoxSizer(wxHORIZONTAL);
    
    boxSizerPop3AdvConfig->Add(bSizer31, 0, 0, WXC_FROM_DIP(5));
    
    m_sdbSizer62 = new wxStdDialogButtonSizer();
    
    bSizer31->Add(m_sdbSizer62, 1, wxLEFT|wxRIGHT|wxBOTTOM|wxEXPAND, WXC_FROM_DIP(5));
    
    m_button2263 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_sdbSizer62->AddButton(m_button2263);
    
    m_button2274 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_sdbSizer62->AddButton(m_button2274);
    
    m_button2285 = new wxButton(this, wxID_HELP, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_sdbSizer62->AddButton(m_button2285);
    m_sdbSizer62->Realize();
    
    SetName(wxT("MyBaseAdvancedPopConfigDlg"));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
}

MyBaseAdvancedPopConfigDlg::~MyBaseAdvancedPopConfigDlg()
{
}

wxMsBasePasswordPromptDlg::wxMsBasePasswordPromptDlg(wxWindow* parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style)
    : wxDialog(parent, id, title, pos, size, style)
{
    if ( !bBitmapLoaded ) {
        // We need to initialise the default bitmap handler
        wxXmlResource::Get()->AddHandler(new wxBitmapXmlHandler);
        wxC10F1InitBitmapResources();
        bBitmapLoaded = true;
    }
    
    wxBoxSizer* boxSizer409 = new wxBoxSizer(wxVERTICAL);
    this->SetSizer(boxSizer409);
    
    wxStaticBoxSizer* staticBoxSizer413 = new wxStaticBoxSizer( new wxStaticBox(this, wxID_ANY, _("Please enter the password:")), wxVERTICAL);
    
    boxSizer409->Add(staticBoxSizer413, 1, wxALL|wxEXPAND, WXC_FROM_DIP(5));
    
    wxGridSizer* gridSizer417 = new wxGridSizer(0, 2, 0, 0);
    
    staticBoxSizer413->Add(gridSizer417, 0, wxEXPAND, WXC_FROM_DIP(5));
    
    m_staticTextPwServerLabel = new wxStaticText(this, wxID_ANY, _("POP3 Server:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer417->Add(m_staticTextPwServerLabel, 0, wxRIGHT|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    m_staticTextPwServer = new wxStaticText(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer417->Add(m_staticTextPwServer, 0, wxLEFT, WXC_FROM_DIP(5));
    
    m_staticTextPwUserNameLabel = new wxStaticText(this, wxID_ANY, _("User Name:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer417->Add(m_staticTextPwUserNameLabel, 0, wxRIGHT|wxALIGN_RIGHT, WXC_FROM_DIP(5));
    
    m_staticTextPwUserName = new wxStaticText(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer417->Add(m_staticTextPwUserName, 0, wxLEFT, WXC_FROM_DIP(5));
    
    m_staticTextPwPasswordLabel = new wxStaticText(this, wxID_ANY, _("Password:"), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    
    gridSizer417->Add(m_staticTextPwPasswordLabel, 0, wxRIGHT|wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL, WXC_FROM_DIP(5));
    
    m_textCtrlPassword = new wxTextCtrl(this, wxID_ANY, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1,-1)), 0);
    #if wxVERSION_NUMBER >= 3000
    m_textCtrlPassword->SetHint(wxT(""));
    #endif
    
    gridSizer417->Add(m_textCtrlPassword, 0, wxLEFT, WXC_FROM_DIP(5));
    
    m_stdBtnSizer433 = new wxStdDialogButtonSizer();
    
    boxSizer409->Add(m_stdBtnSizer433, 0, wxALL|wxALIGN_CENTER_HORIZONTAL, WXC_FROM_DIP(5));
    
    m_button435 = new wxButton(this, wxID_CANCEL, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer433->AddButton(m_button435);
    
    m_button437 = new wxButton(this, wxID_OK, wxT(""), wxDefaultPosition, wxDLG_UNIT(this, wxSize(-1, -1)), 0);
    m_stdBtnSizer433->AddButton(m_button437);
    m_stdBtnSizer433->Realize();
    
    SetName(wxT("wxMsBasePasswordPromptDlg"));
    SetSize(500,300);
    if (GetSizer()) {
         GetSizer()->Fit(this);
    }
    if(GetParent()) {
        CentreOnParent(wxBOTH);
    } else {
        CentreOnScreen(wxBOTH);
    }
}

wxMsBasePasswordPromptDlg::~wxMsBasePasswordPromptDlg()
{
}
